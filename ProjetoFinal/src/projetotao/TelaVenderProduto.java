/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetotao;

import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.BarcodeInter25;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.AWTKeyStroke;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

public class TelaVenderProduto extends javax.swing.JFrame {

    public TelaVenderProduto() {
        initComponents();
        setLocationRelativeTo(null);

        this.setExtendedState(MAXIMIZED_BOTH);

        produtosDisponiveis();

        imp.configurarModelo(7);
        imp.iniciar("COM3");
        u.getUsuario(u.usuario);
        JT_Venda_Produtos.setRowHeight(30);
        JT_CarrinhoCompras.setRowHeight(30);
        considerarEnterComoTab(JP_Campos);
        if (u.getTipo_usuario() == 1) {

            JB_Excluir.setVisible(false);

        }

        JB_Pesquisar.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "pesquisar");
        JB_Pesquisar.getActionMap().put("pesquisar", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {

                vender();

            }
        });

        if (u.getTipo_usuario() == 2) {

            JB_Excluir.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "excluir");
            JB_Excluir.getActionMap().put("excluir", new AbstractAction() {

                @Override
                public void actionPerformed(ActionEvent e) {

                    new TelaExcluiTicket().setVisible(true);

                }
            });

        }

        if (u.getTipo_usuario() == 1) {

            System.out.println("CAIXA");
            JB_DEL.setToolTipText("Pressione DEL para REMOVER DO CARRINHO DE COMPRAS");

            JB_DEL.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "excluir");
            JB_DEL.getActionMap().put("excluir", new AbstractAction() {

                @Override
                public void actionPerformed(ActionEvent e) {

                    System.out.println("DEL !");
                    dtmcv.removeRow(JT_CarrinhoCompras.getSelectedRow()); //remove tudo uma por vez ate o for terminar

                }
            });

        }

        JB_Imprimir.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), "imprimir");
        JB_Imprimir.getActionMap().put("imprimir", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {

                imprimir();

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JT_Venda_Produtos = new javax.swing.JTable();
        JB_Pesquisar = new javax.swing.JButton();
        JB_Imprimir = new javax.swing.JButton();
        JB_Excluir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        JT_CarrinhoCompras = new javax.swing.JTable();
        JB_DEL = new javax.swing.JButton();
        JP_Campos = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        JTF_Produto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        JTF_Codigo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        JTF_Qtde = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Venda de Produtos");

        JT_Venda_Produtos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição", "Preço "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Venda_Produtos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_Venda_ProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JT_Venda_Produtos);

        JB_Pesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetotao/vender.png"))); // NOI18N
        JB_Pesquisar.setToolTipText("Pressione ENTER para PESQUISAR");
        JB_Pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_PesquisarActionPerformed(evt);
            }
        });

        JB_Imprimir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        JB_Imprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetotao/imprimir_ticket.png"))); // NOI18N
        JB_Imprimir.setText("Imprimir");
        JB_Imprimir.setToolTipText("Pressione F1 para IMPRIMIR");
        JB_Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_ImprimirActionPerformed(evt);
            }
        });

        JB_Excluir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        JB_Excluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetotao/delete.png"))); // NOI18N
        JB_Excluir.setText("Excluir");
        JB_Excluir.setToolTipText("Pressione DEL para EXCLUIR");
        JB_Excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_ExcluirActionPerformed(evt);
            }
        });

        JT_CarrinhoCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição", "Preço", "Quantidade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_CarrinhoCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_CarrinhoComprasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(JT_CarrinhoCompras);

        JB_DEL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetotao/remove_from_cart.png"))); // NOI18N
        JB_DEL.setToolTipText("");
        JB_DEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_DELActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Produto:");

        JTF_Produto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                JTF_ProdutoFocusLost(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Código:");

        JTF_Codigo.setText("1");
        JTF_Codigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                JTF_CodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                JTF_CodigoFocusLost(evt);
            }
        });

        jLabel4.setText("Quantidade");

        JTF_Qtde.setText("1");
        JTF_Qtde.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                JTF_QtdeFocusGained(evt);
            }
        });

        javax.swing.GroupLayout JP_CamposLayout = new javax.swing.GroupLayout(JP_Campos);
        JP_Campos.setLayout(JP_CamposLayout);
        JP_CamposLayout.setHorizontalGroup(
            JP_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JP_CamposLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(JP_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JP_CamposLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JP_CamposLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(JP_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JP_CamposLayout.createSequentialGroup()
                        .addComponent(JTF_Codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTF_Qtde, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(JTF_Produto, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        JP_CamposLayout.setVerticalGroup(
            JP_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JP_CamposLayout.createSequentialGroup()
                .addGroup(JP_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JTF_Produto, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(JP_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(JP_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JTF_Qtde, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(JTF_Codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JB_Imprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JB_Excluir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JP_Campos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 460, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JB_DEL, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JB_Pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(281, 281, 281)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JB_Pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(JB_DEL, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(JP_Campos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JB_Imprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JB_Excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JB_PesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_PesquisarActionPerformed

        vender();

    }//GEN-LAST:event_JB_PesquisarActionPerformed

    Produto[] produtos_selecionados = new Produto[500]; //vetor para os produtos
    int[] quantidades = new int[500]; //vetor para as quantidades
    int cont_produtos_selecionados = 0;

    private void JB_ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_ImprimirActionPerformed

        imprimir();

    }//GEN-LAST:event_JB_ImprimirActionPerformed

    private void JB_ExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_ExcluirActionPerformed

        new TelaExcluiTicket().setVisible(true);

    }//GEN-LAST:event_JB_ExcluirActionPerformed

    private void JT_Venda_ProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_Venda_ProdutosMouseClicked
    }//GEN-LAST:event_JT_Venda_ProdutosMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        int tipo_usuario = u.getTipo_usuario(), codigo = u.getCodigo();
        String login = u.getLogin();
        if (tipo_usuario == 1) {

            try {

                GerarRelatorioPorCaixa(login, codigo);

            } catch (SQLException ex) {
                Logger.getLogger(TelaVenderProduto.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(TelaVenderProduto.class.getName()).log(Level.SEVERE, null, ex);
            }
            u.setLogado(false);
        }
        imp.encerrar();

    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed

    private void JB_DELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_DELActionPerformed

        dtmcv.removeRow(JT_CarrinhoCompras.getSelectedRow()); //remove tudo uma por vez ate o for terminar

    }//GEN-LAST:event_JB_DELActionPerformed

    private void JTF_CodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JTF_CodigoFocusLost

        pesquisarProduto();

    }//GEN-LAST:event_JTF_CodigoFocusLost

    private void JTF_CodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JTF_CodigoFocusGained

        JTF_Codigo.setText("");

    }//GEN-LAST:event_JTF_CodigoFocusGained

    private void JTF_QtdeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JTF_QtdeFocusGained

        JTF_Qtde.setText("");

    }//GEN-LAST:event_JTF_QtdeFocusGained

    private void JTF_ProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JTF_ProdutoFocusLost

        dtm = (DefaultTableModel) JT_Venda_Produtos.getModel();
        String sql = "";
        if (!JTF_Produto.getText().equals("")) {

            sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE (descricao LIKE '%" + JTF_Produto.getText() + "%' AND liberar_venda = 1);";

            //vender(sql);
//        } else if (!JTF_Produto.getText().equals("")) {
//            
//        
//            sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE (descricao LIKE '%" + JTF_Produto.getText() + "%' AND liberar_venda = 1);";
//            
//        } else if(!JTF_Codigo.getText().equals("0")) {
//            
//            sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE (id = "+JTF_Codigo.getText()+" AND liberar_venda = 1);";
//
//            // } else if (!JTF_Codigo.getText().equals("")) {
//            // sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE id = " + JTF_Codigo.getText() + " AND liberar_venda = 1;";
//            //} else if (!JTF_Produto.getText().equals("") && !JTF_Codigo.getText().equals("")) {
//            // sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE (descricao LIKE '%" + JTF_Produto.getText() + "%' AND id = " + JTF_Codigo.getText() + " AND liberar_venda = 1);";
//        } else {
//
//            sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE liberar_venda = 1;";
            try {

                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection(new CoreSql().db_conexao);
                st = con.createStatement();

            } catch (Exception e) {

                System.out.println("Erro: " + e.toString());

            }

            try {
                rs = st.executeQuery(sql);
                limpaTabela();
                while (rs.next()) {
                    dtm.addRow(new Object[]{rs.getString("id"), rs.getString("descricao"), rs.getString("valor_venda")});
                }

            } catch (SQLException ex) {
                System.out.println("Pesquina não encontrada: " + ex.toString());
            }
        }

    }//GEN-LAST:event_JTF_ProdutoFocusLost

    private void JT_CarrinhoComprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_CarrinhoComprasMouseClicked

        if (evt.getClickCount() == 2) {

            imprimir();

        }

    }//GEN-LAST:event_JT_CarrinhoComprasMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaVenderProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaVenderProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaVenderProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaVenderProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaVenderProduto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JB_DEL;
    private javax.swing.JButton JB_Excluir;
    private javax.swing.JButton JB_Imprimir;
    private javax.swing.JButton JB_Pesquisar;
    private javax.swing.JPanel JP_Campos;
    private javax.swing.JTextField JTF_Codigo;
    private javax.swing.JTextField JTF_Produto;
    private javax.swing.JTextField JTF_Qtde;
    private javax.swing.JTable JT_CarrinhoCompras;
    private javax.swing.JTable JT_Venda_Produtos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    //variaveis para conexao (usar classe CoreSql)
    private DefaultTableModel dtm;
    private DefaultTableModel dtmcv;
    private Connection con;
    private Statement st;
    private ResultSet rs;

    private void produtosDisponiveis() {

        dtm = (DefaultTableModel) JT_Venda_Produtos.getModel();
        try {

            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(new CoreSql().db_conexao);
            st = con.createStatement();

        } catch (Exception e) {

            System.out.println("Erro: " + e.toString());

        }
        //executar sql
        try {

            rs = st.executeQuery("SELECT id, descricao, valor_venda FROM b_produtos WHERE liberar_venda = TRUE");
            limpaTabela();
            while (rs.next()) {
                //cria linha
                dtm.addRow(new Object[]{rs.getString("Id"), rs.getString("descricao"), rs.getString("valor_venda")});
            }

            st.close();
            con.close();

        } catch (Exception e) {

            System.out.println("Erro: " + e.toString());

        }
    }

    public void limpaTabela() {
        //Se a tabela está preenchida ela limpa
        if (dtm.getRowCount() != 0) { //se tiver linhas na tabela
            //Limpa tabela
            JT_Venda_Produtos.selectAll();//seleciona todas
            int[] l = JT_Venda_Produtos.getSelectedRows();
            for (int i = (l.length - 1); i >= 0; i--) {
                dtm.removeRow(l[i]); //remove tudo uma por vez ate o for terminar
            }
        }
    }

    private void pesquisarProduto() {

        dtm = (DefaultTableModel) JT_Venda_Produtos.getModel();
        String sql = "";
        if (!JTF_Produto.getText().equals("") && !JTF_Codigo.getText().equals("0")) {

            sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE (id = " + JTF_Codigo.getText() + " AND descricao LIKE '%" + JTF_Produto.getText() + "%' AND liberar_venda = 1);";

            //vender(sql);
//        } else if (!JTF_Produto.getText().equals("")) {
//            
//        
//            sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE (descricao LIKE '%" + JTF_Produto.getText() + "%' AND liberar_venda = 1);";
//            
//        } else if(!JTF_Codigo.getText().equals("0")) {
//            
//            sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE (id = "+JTF_Codigo.getText()+" AND liberar_venda = 1);";
//
//            // } else if (!JTF_Codigo.getText().equals("")) {
//            // sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE id = " + JTF_Codigo.getText() + " AND liberar_venda = 1;";
//            //} else if (!JTF_Produto.getText().equals("") && !JTF_Codigo.getText().equals("")) {
//            // sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE (descricao LIKE '%" + JTF_Produto.getText() + "%' AND id = " + JTF_Codigo.getText() + " AND liberar_venda = 1);";
//        } else {
//
//            sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE liberar_venda = 1;";
        } else if (!JTF_Codigo.getText().equals("0")) {

            sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE (id = " + JTF_Codigo.getText() + " AND liberar_venda = 1);";

            // vender(sql);
        } else {

            JOptionPane.showMessageDialog(null, "A descrição não pode estar em branco e o código ");

        }

        try {

            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(new CoreSql().db_conexao);
            st = con.createStatement();

        } catch (Exception e) {

            System.out.println("Erro: " + e.toString());

        }

        try {
            rs = st.executeQuery(sql);
            limpaTabela();
            while (rs.next()) {
                dtm.addRow(new Object[]{rs.getString("id"), rs.getString("descricao"), rs.getString("valor_venda")});
            }

        } catch (SQLException ex) {
            System.out.println("Pesquina não encontrada: " + ex.toString());
        }

    }

    private void vender() {

        dtmcv = (DefaultTableModel) JT_CarrinhoCompras.getModel();
        JT_Venda_Produtos.selectAll();
        int linha = JT_Venda_Produtos.getSelectedRow();
        int codigo = Integer.parseInt((String) JT_Venda_Produtos.getValueAt(linha, 0)), quantidade = Integer.parseInt(JTF_Qtde.getText());
        String descricao = (String) JT_Venda_Produtos.getValueAt(linha, 1);
        Double preco = Double.parseDouble((String) JT_Venda_Produtos.getValueAt(linha, 2));
        Boolean existe = false;
        int linhas = JT_CarrinhoCompras.getRowCount();

        if (linhas > 0) {

            for (int j = 0; j < linhas; j++) {
                int cod = (int) JT_CarrinhoCompras.getValueAt(j, 0);
                if (cod == codigo) {

                    existe = true;
                    linha = j;

                }

            }
        }

        if (existe) {

            JT_CarrinhoCompras.setValueAt(quantidade, linha, 3);

        } else {

            dtmcv.addRow(new Object[]{codigo, descricao, preco, quantidade});

        }

        String sql = "SELECT id, descricao, valor_venda FROM b_produtos WHERE liberar_venda = 1;";
        try {
            rs = st.executeQuery(sql);
            limpaTabela();
            while (rs.next()) {
                dtm.addRow(new Object[]{rs.getString("id"), rs.getString("descricao"), rs.getString("valor_venda")});
            }

        } catch (SQLException ex) {
            System.out.println("Pesquina não encontrada: " + ex.toString());
        }

        JTF_Produto.setText("");
        JTF_Codigo.setText("1");
        JTF_Qtde.setText("1");
        JTF_Produto.requestFocus();

    }

    private void imprimir() {

        int papel = imp.verificaPapel();
        Integer qtde = null; //controle para as quantidades
        Produto p;
        Boolean criou = null;

        if (papel == 1) {
            JT_CarrinhoCompras.selectAll();
            System.out.println("JT_CarrinhoCompras.getRowCount(): " + JT_CarrinhoCompras.getRowCount());
            for (int j = 0; j < JT_CarrinhoCompras.getRowCount(); j++) {

                p = new Produto((int) JT_CarrinhoCompras.getValueAt(j, 0)); // cria um novo produto usando o código da linha selecionada
                this.produtos_selecionados[j] = new Produto((int) JT_CarrinhoCompras.getValueAt(j, 0));
                this.cont_produtos_selecionados++;
                // System.out.println("prod_selec");
                System.out.println("passou pelo prod " + produtos_selecionados[j].codigo);
                System.out.println("prod " + produtos_selecionados[j].descricao);

                qtde = (int) JT_CarrinhoCompras.getValueAt(j, 3); //qtde recebe o que está no campo quantidade

                if (qtde == 0) { // se a quantidade for 0, ou seja, se o cara esquecer de colocar uma quantidade
                    this.quantidades[j] = 1; //armazena só uma quantidade
                } else { //senão
                    this.quantidades[j] = qtde; //armazena a quantidade que esta no campo
                }

                System.out.println("quantidade: " + quantidades[j]);

                valor += ((Double) JT_CarrinhoCompras.getValueAt(j, 2) * quantidades[j]);

            }
            
            
            //aqui chama a thread
            Produto[] produtos = new Produto[this.cont_produtos_selecionados];
            for(int cont6 = 0; cont6 < this.cont_produtos_selecionados; cont6++) {
                produtos[cont6] = this.produtos_selecionados[cont6];
                produtos[cont6].quantidade = this.quantidades[cont6];
            }
            ThreadTroco threadTroco = new ThreadTroco(produtos);
            Thread troco_thread = new Thread(threadTroco);
            troco_thread.setPriority(Thread.MAX_PRIORITY);
            troco_thread.start();
            
            
            /*
            String[] options = {"OK"};
            JPanel panel = new JPanel();
            JLabel lbl = new JLabel("Entre com o dinheiro recebido: ");
            JTextField txt = new JTextField(10);
            panel.add(lbl);
            panel.add(txt);

            //pede pro cara entrar com o valor que o cliente deu de dinheiro e atribui essa quantidade à variável troco
            int option = JOptionPane.showOptionDialog(null, panel, "Valor total da venda é de: " + d.format(valor), JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

            try {

                String troco2 = formataValor(txt.getText());
                troco = Double.parseDouble(troco2); //atribui o dinheiro recebido à variável troco
                if (troco < valor) { //verifica se o dinheiro que o cliente deu é maior ou igual ao valor total da compra

                    JOptionPane.showMessageDialog(null, "O troco não pode ser menor que o valor da compra!", "Troco insuficiente", JOptionPane.ERROR_MESSAGE);
                    option = JOptionPane.showOptionDialog(null, panel, "Valor total da venda é de: " + d.format(valor), JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
                    troco = Double.parseDouble(txt.getText()); //atribui o dinheiro recebido à variável troco
                    System.out.println("o cara colocou o valor de: " + troco);

                }

            } catch (NumberFormatException n) { //Se o cara apertar ok sem digitar nada (troco em branco)

                JOptionPane.showMessageDialog(null, "O troco não pode estar em branco!"); //mostra erro
                //pede pro cara inserir troco de novo
                option = JOptionPane.showOptionDialog(null, panel, "Valor total da venda é de: " + d.format(valor), JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
                //atribui o valor que o cara digitou no troco
                troco = Double.parseDouble(txt.getText());

                if (troco < valor) { //verifica se o dinheiro que o cliente deu é maior ou igual ao valor total da compra

                    JOptionPane.showMessageDialog(null, "O troco não pode ser menor que o valor da compra!", "Troco insuficiente", JOptionPane.ERROR_MESSAGE);
                    option = JOptionPane.showOptionDialog(null, panel, "Valor total da venda é de: " + d.format(valor), JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
                    troco = Double.parseDouble(txt.getText()); //atribui o dinheiro recebido à variável troco

                }
            }
            */
            
            ThreadImprimirTickets threadimprimir = new ThreadImprimirTickets(produtos, quantidades);
            Thread imprimir_thread = new Thread(threadimprimir);
            //imprimir_thread.setPriority(Thread.MIN_PRIORITY);
            imprimir_thread.start();
            
            
//                for (int j = 0; j < JT_CarrinhoCompras.getRowCount(); j++) {
//
//                    int quantidade = quantidades[j];
//
//                    Ticket t = new Ticket();
//                    try {
//                        papel = imp.verificaPapel();
//
//                        for (int i = 0; i < quantidade; i++) {
//
//                            System.out.println("quantidades: " + quantidade);
//
//                            if (papel == 1) {
//                                java.util.Date agora = new java.util.Date();
//                                SimpleDateFormat formata = new SimpleDateFormat(data);
//
//                                data1 = formata.format(agora);
//                                formata = new SimpleDateFormat(hora);
//                                hora1 = formata.format(agora);
//
//                                System.out.println("produtooo: " + produtos_selecionados[j].descricao);
//
//                                criou = t.criar(produtos_selecionados[j]);
//
//
//                                if (criou) {
//
//
//                                    imp.imprimePersonalizado(" Gerenciador de Ticket", 1, 0, 0, 1, 1);
//                                    imp.novaLinha();
//                                    imp.imprimePersonalizado(" " + produtos_selecionados[j].descricao, 2, 0, 0, 1, 1);
//                                    imp.novaLinha();
//                                    System.out.println("  R$: " + d.format(produtos_selecionados[j].valor_venda));
//                                    imp.imprimePersonalizado("  R$: " + d.format(produtos_selecionados[j].valor_venda), 1, 0, 0, 1, 0);
//                                    imp.novaLinha();
//                                    imp.imprimePersonalizado("  " + data1 + " " + hora1, 1, 0, 0, 1, 0);
//                                    imp.novaLinha();
//                                    imp.imprimePersonalizado("  " + e.getNomeEventoAberto(), 1, 0, 0, 1, 0);
//                                    imp.novaLinha();
//                                    imp.imprimePersonalizado("  " + e.getLugarEventoAberto(), 1, 0, 0, 1, 0);
//                                    imp.novaLinha();
//                                    String cod = t.getCodigo(produtos_selecionados[j]);
//                                    int tam = cod.length();
//                                    String codigo = formataCodigo(cod, tam);
//                                    imp.imprimirCodBarras(codigo);
//
////                                
//                                }
//
//                                imp.imprimePersonalizado("   Ingresso Garantido", 1, 0, 0, 1, 0);
//                                imp.novaLinha();
//                                imp.imprimePersonalizado("   (55)9907-7900", 1, 0, 0, 1, 0);
//                                imp.novaLinha();
//                                imp.acionarGuilhotina();
//                            } else {
////
//                                JOptionPane.showMessageDialog(null, "A impressora está sem papel!");
//
//                            }
//
//                        }
//
//                    } catch (Exception ert) {
//                        JOptionPane.showMessageDialog(null, ert.toString());
//                        ert.printStackTrace();
//
//                    }
//                }
                /*
                if (criou) {

                    JOptionPane.showMessageDialog(null, "O troco é de: " + d.format(troco - valor)); //mostra quanto tem que dar de troco

                }
                */

                this.produtos_selecionados = new Produto[500];
                this.quantidades = new int[500];
                this.cont_produtos_selecionados = 0;
                i = 0;
                valor = 0.0;
                troco = 0.0;

                int[] l = JT_CarrinhoCompras.getSelectedRows();
                for (int i = (l.length - 1); i >= 0; i--) {
                    dtmcv.removeRow(l[i]); //remove tudo uma por vez ate o for terminar
                }
            
            
            
        } else {

            JOptionPane.showMessageDialog(null, "A impressora está sem papel!");

        }
    }

    int i = 0;
    Double valor = 0.0, troco = null;
    DecimalFormat d = new DecimalFormat("R$ ####,##0.00");

    private String formataValor(String valor) {

        if (valor.contains(",")) {

            valor = valor.replace(",", ".");
            System.out.println("valor: " + valor);

        }

        return valor;

    }

    Impressora imp = new Impressora();
    String texto = "";

    Usuario u = new Usuario();

    public String GerarRelatorioPorCaixa(String login, int id) throws SQLException, ClassNotFoundException {

        String retorno = "";
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(new CoreSql().db_conexao);
        st = con.createStatement();
        int evento_id = e.getEventoID();

        java.util.Date agora = new java.util.Date();
        SimpleDateFormat formata = new SimpleDateFormat(data);

        data1 = formata.format(agora);
        formata = new SimpleDateFormat(hora);
        hora1 = formata.format(agora);

        retorno += "<html>Usuario: " + login + " <br>ID: " + id + "<br>";
        retorno += "Encerramento: " + data1 + " " + hora1 + "<br>";
        double quanto_o_usuario_vendeu_em_dinheiro = 0;

        try {
            con = DriverManager.getConnection(new CoreSql().db_conexao);
            st = con.createStatement();
            rs = st.executeQuery("SELECT SUM(valor_venda) FROM b_ticket WHERE usuario_id = " + id + " AND evento_id = " + evento_id + " group by produto_id;");
            while (rs.next()) {
                quanto_o_usuario_vendeu_em_dinheiro += Double.parseDouble(rs.getString("SUM(valor_venda)"));
            }
            st.close();
            con.close();
        } catch (Exception ex) {
            System.out.println("Erro: " + ex.toString());
        }

        //retorno += "Valor em caixa: " + d.format(quanto_o_usuario_vendeu_em_dinheiro) + "</html>";
        retorno += "Valor em caixa: "+"<br>";
        retorno += d.format(quanto_o_usuario_vendeu_em_dinheiro) + "</html>";

        String[] options = {"IMPRIMIR"};
        JPanel panel = new JPanel();
        JLabel lbl = new JLabel(retorno);
        panel.add(lbl);

        //pede pro cara entrar com o valor que o cliente deu de dinheiro e atribui essa quantidade à variável troco
        int option = JOptionPane.showOptionDialog(null, panel, "Relatório do Caixa", JOptionPane.NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if (option == 0) {
            int papel = imp.verificaPapel();
            if (papel == 1) {

                imp.imprimePersonalizado("    " + login, 2, 0, 0, 1, 1);
                imp.novaLinha();
                //imp.imprimePersonalizado("         ID: " + id, 1, 0, 0, 1, 0);
                imp.novaLinha();
                imp.novaLinha();
                imp.imprimePersonalizado(" Fechamento do Caixa:" , 1, 0, 0, 1, 0);
                imp.novaLinha();
                imp.imprimePersonalizado(" " + data1 + " " + hora1, 1, 0, 0, 1, 0);
                imp.novaLinha();
                imp.novaLinha();
                imp.novaLinha();
                imp.imprimePersonalizado("  Valor em caixa: " , 1, 0, 0, 1, 0);
                imp.novaLinha();
                imp.imprimePersonalizado("   "  + d.format(quanto_o_usuario_vendeu_em_dinheiro), 2, 0, 0, 1, 1);
                imp.novaLinha();
                imp.novaLinha();
                imp.imprimePersonalizado("   Bar Garantido", 2, 0, 0, 1, 1);
                imp.novaLinha();
                imp.acionarGuilhotina();
            } else {
                
                JOptionPane.showMessageDialog(null, "A impressora está sem papel!");
                
            }
        }
        return retorno;
    }

    Evento e = new Evento();

//    public void imprimirCodigoBarras(String cod) throws OutputException, IOException {
//        int tam = cod.length();
//        String codigo = formataCodigo(cod, tam);
////        BufferedImage barCodeImage = null;
////        Barcode barcode;
////        try {
////            barcode = BarcodeFactory.createInt2of5(codigo);
////            barCodeImage = BarcodeImageHandler.getImage(barcode);
////            File f = new File(codigo + ".bmp");
////            ImageIO.write(barCodeImage, "bmp", f);
//        imp.imprimirCodBarras(codigo);
//        imp.novaLinha();
//
////        } catch (BarcodeException ex) {
////        } catch (OutputException ex) {
////        }
//    }
    public String formataCodigo(String codigo, int tam) {

        int cb = 8 - tam;
        String zeros = "";

        for (int j = 0; j < cb; j++) {

            zeros += "0";

        }
        zeros += codigo;
        System.out.println("ZEROS: " + zeros);
        return zeros;
    }

    String data = "dd/MM/yyyy";
    String hora = "HH:mm:ss";
    String data1, hora1;

    public static void considerarEnterComoTab(Component comp) {

        Set<AWTKeyStroke> keystrokes = comp.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS);
        Set<AWTKeyStroke> newKeystrokes = new HashSet<AWTKeyStroke>(keystrokes);
        newKeystrokes.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        comp.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, newKeystrokes);

    }
}
